{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ruochenliu/Desktop/volvo-social-media/src/views/MentionStatistics.jsx\";\nimport React, { Component } from 'react';\nimport BarGraphCard from '../components/BarGraphCard.jsx';\nimport PieGraphCard from '../components/PieGraphCard.jsx';\nimport LineGraphCard from '../components/LineGraphCard.jsx';\nimport AreaGraphCard from '../components/AreaGraphCard.jsx';\nimport TweetsCard from '../components/TweetsCard.jsx';\nimport WordCloudCard from '../components/WordCloudCard.jsx';\nimport axios from 'axios';\n\nclass MentionStatistics extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.getData();\n    };\n\n    this.getData = () => {\n      const url = \"https://easydoc.xyz/mock/CHs95kcg/api/mention\";\n      axios.get(url).then(res => {\n        console.log(res.data);\n        this.setState({\n          data: res.data\n        });\n      }, error => console.log('An error occurred.', error));\n    };\n\n    this.state = {\n      data: {}\n    };\n  }\n\n  render() {\n    const {\n      data\n    } = this.state;\n    var scores = [];\n\n    if (data && data.score_dist) {\n      const score_dist = data.score_dist;\n      scores = [{\n        name: \"positive\",\n        value: score_dist[\"positive\"]\n      }, {\n        name: \"negative\",\n        value: score_dist[\"negative\"]\n      }, {\n        name: \"neutral\",\n        value: score_dist[\"neutral\"]\n      }];\n    }\n\n    var model_scores = [];\n\n    if (data && data.model_score_list) {\n      for (var i = 0; i <= 10; i++) {\n        model_scores.push({\n          \"key\": i,\n          \"s60\": data.model_score_list[0].score_dist[i],\n          \"xc90\": data.model_score_list[2].score_dist[i],\n          \"xc40\": data.model_score_list[1].score_dist[i]\n        });\n      }\n    }\n\n    var twitters = {};\n\n    if (data && data.top_twitter) {\n      data.top_twitter.forEach((item, i) => {\n        if (item.type === \"recent\") {\n          twitters[\"recent_twitters\"] = item.twitters;\n        } else if (item.type === \"top_like\") {\n          twitters[\"top_like_twitters\"] = item.twitters;\n        } else if (item.type === \"top_retweet\") {\n          twitters[\"top_retweet_twitters\"] = item.twitters;\n        } else if (item.type === \"top_influence\") {\n          twitters[\"top_influence_twitters\"] = item.twitters;\n        }\n      });\n    }\n\n    var words = [];\n\n    if (data && data.word_cloud) {\n      data.word_cloud.forEach((item, i) => {\n        words.push({\n          text: item.word,\n          value: item.count\n        });\n      });\n    }\n\n    const tmp_avg_scores = [{\n      time: 'Jun',\n      score: 100\n    }, {\n      time: 'Jul',\n      score: 200\n    }, {\n      time: 'Aug',\n      score: 300\n    }, {\n      time: 'Sep',\n      score: 200\n    }, {\n      time: 'Oct',\n      score: 400\n    }, {\n      time: 'Nov',\n      score: 100\n    }, {\n      time: 'Dec',\n      score: 200\n    }];\n    console.log(data);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !data ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"AA-container\",\n        children: [/*#__PURE__*/_jsxDEV(AreaGraphCard, {\n          graphData: model_scores,\n          type: \"Sentiment Score for Models\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PieGraphCard, {\n          graphData: scores,\n          type: \"Sentiment Scores Distribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LineGraphCard, {\n          graphData: tmp_avg_scores,\n          type: \"Sentiment Scores over Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TweetsCard, {\n          tweets: twitters,\n          type: \"Latest Mentions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WordCloudCard, {\n          words: words,\n          type: \"Word Cloud\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  }\n\n} // <TweetsCard tweets={data.top_twitters} type=\"Latest Mentions\" />\n// <WordCloudCard words={data.word_cloud} type=\"Word Cloud\"/>\n\n\nexport default MentionStatistics;","map":{"version":3,"sources":["/Users/ruochenliu/Desktop/volvo-social-media/src/views/MentionStatistics.jsx"],"names":["React","Component","BarGraphCard","PieGraphCard","LineGraphCard","AreaGraphCard","TweetsCard","WordCloudCard","axios","MentionStatistics","constructor","props","componentDidMount","getData","url","get","then","res","console","log","data","setState","error","state","render","scores","score_dist","name","value","model_scores","model_score_list","i","push","twitters","top_twitter","forEach","item","type","words","word_cloud","text","word","count","tmp_avg_scores","time","score"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport BarGraphCard from '../components/BarGraphCard.jsx';\nimport PieGraphCard from '../components/PieGraphCard.jsx';\nimport LineGraphCard from '../components/LineGraphCard.jsx';\nimport AreaGraphCard from '../components/AreaGraphCard.jsx';\nimport TweetsCard from '../components/TweetsCard.jsx';\nimport WordCloudCard from '../components/WordCloudCard.jsx';\nimport axios from 'axios';\n\n\nclass MentionStatistics extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {\n\n      }\n    }\n  };\n\n  componentDidMount = () => {\n    this.getData();\n  }\n\n  getData = () => {\n    const url = \"https://easydoc.xyz/mock/CHs95kcg/api/mention\";\n    axios.get(url)\n      .then(res => {\n        console.log(res.data);\n        this.setState({\n          data: res.data\n        })\n      },\n      error => console.log('An error occurred.', error),\n    );\n  }\n\n  render() {\n    const { data } = this.state;\n    var scores = [];\n    if (data && data.score_dist) {\n      const score_dist = data.score_dist;\n      scores = [\n        {name: \"positive\", value: score_dist[\"positive\"]},\n        {name: \"negative\", value: score_dist[\"negative\"]},\n        {name: \"neutral\", value: score_dist[\"neutral\"]},\n      ]\n    }\n     var model_scores = [];\n    if (data && data.model_score_list) {\n      for (var i = 0; i <= 10; i++) {\n        model_scores.push({\n          \"key\": i,\n          \"s60\": data.model_score_list[0].score_dist[i],\n          \"xc90\": data.model_score_list[2].score_dist[i],\n          \"xc40\": data.model_score_list[1].score_dist[i],\n        })\n      }\n    }\n\n    var twitters = {};\n    if (data && data.top_twitter) {\n\n      data.top_twitter.forEach((item, i) => {\n\n        if (item.type === \"recent\") {\n          twitters[\"recent_twitters\"] = item.twitters;\n        } else if (item.type === \"top_like\") {\n          twitters[\"top_like_twitters\"] = item.twitters;\n        } else if (item.type === \"top_retweet\") {\n          twitters[\"top_retweet_twitters\"] = item.twitters;\n        } else if (item.type === \"top_influence\") {\n          twitters[\"top_influence_twitters\"] = item.twitters;\n        }\n      });\n    }\n\n    var words = [];\n    if (data && data.word_cloud) {\n      data.word_cloud.forEach((item, i) => {\n        words.push({\n          text: item.word,\n          value: item.count,\n        })\n      });\n\n    }\n\n    const tmp_avg_scores = [\n      {time: 'Jun', score: 100},\n      {time: 'Jul', score: 200},\n      {time: 'Aug', score: 300},\n      {time: 'Sep', score: 200},\n      {time: 'Oct', score: 400},\n      {time: 'Nov', score: 100},\n      {time: 'Dec', score: 200},\n    ];\n\n    console.log(data);\n\n    return (\n      <div>\n        {!data ? null :\n        <div className=\"AA-container\">\n          <AreaGraphCard graphData={model_scores} type=\"Sentiment Score for Models\" />\n          <PieGraphCard graphData={scores} type=\"Sentiment Scores Distribution\"/>\n          <LineGraphCard graphData={tmp_avg_scores} type=\"Sentiment Scores over Time\"/>\n          <TweetsCard tweets={twitters} type=\"Latest Mentions\" />\n          <WordCloudCard words={words} type=\"Word Cloud\"/>\n        </div>}\n      </div>\n\n    )\n  }\n\n\n}\n\n// <TweetsCard tweets={data.top_twitters} type=\"Latest Mentions\" />\n// <WordCloudCard words={data.word_cloud} type=\"Word Cloud\"/>\n\nexport default MentionStatistics;\n"]},"metadata":{},"sourceType":"module"}